Um die Entwicklungsdauer kürzer zu halten und die Wartbarkeit der Persistenzschicht zu erhöhen, wird ein Object Relational Mapper (ORM) eingesetzt.
Dieser hilft die relationale Tabellenstruktur der Datenbank auf Objekte der Programmiersprache abzubilden.
Das verwendete QT4-Toolkit enthält war eine plattformunabhängige Schnittstelle für Datenbanken (QtSql), jedoch hat diese keine ORM funktion.

Folgende ORM-Systeme wurden in Betracht gezogen (http://en.wikipedia.org/wiki/List_of_object-relational_mapping_software):
LiteSQL - Datenbankschema wird mit XML Dateien beschrieben
ODB - Datenbankschema wird aus den C++ Klassen generiert
QxOrm - Benutzt QtSql; Unter Umständen müssen direkte Aufrufe von QtSql erfolgen ("QxOrm cannot resolve all problems with sql and databases, so it is sometimes necessary to use QtSql engine of Qt library to write your own sql query or stored procedure." http://www.qxorm.com/qxorm_en/tutorial.html)
Alle Systeme bieten eine QT integration, die die Schnittstelle zwischen GUI und Persistenzschicht vereinfachen.
Ebenso unterstützen alle Systeme mehrere Datenbankbackends.

Letztendlich fiel die Entscheidung auf ODB, da diese Bibliothek (unter anderem über Caching) die beste Performance verspricht. Ausserdem lassen sich Klassen mit geringem Aufwandt persistent machen.

Als Datenbank wird MySQL eingesetzt. Diese ist für nicht-kommerzielle Zwecke (im Sinne der GPL) frei erhältlich und sehr weit verbreitet. Ein Wechsel auf eine andere Datenbank (zum Beispiel PostgreSQL) sollte dank ODB ohne größere Probleme möglich sein.
