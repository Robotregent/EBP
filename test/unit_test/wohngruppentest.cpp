#include "wohngruppentest.h"
#include <EBPdb/Mitarbeiter.hxx>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
/**
  * \brief Initialisiert Connection und Wohngruppe
  */
void WohngruppenTest::initTestCase()
{
    aConnection = QSharedPointer<ebp::connection> ( new ebp::connection("testUser","testDB"));
    QVERIFY(!aConnection.isNull());
    aConnection->establish("test");
    srand ( time(NULL) );
    aWohngruppe = QSharedPointer<ebp::Wohngruppe>( new ebp::Wohngruppe(QVariant(rand() % 100000 + 1).toString()));
    QVERIFY(!aWohngruppe.isNull());
    aWohngruppe->create(aConnection);

}


/**
  * \brief Testet das Erstellen den Relation Wohngruppe <-1- -n-> Mitarbeiter
  */
void WohngruppenTest::mitarbeiterRelation()
{
    QList < QSharedPointer < ebp::Mitarbeiter > > maList = ebp::Mitarbeiter::loadAll(aConnection);
    if (maList.count()<1)
	return;

    ebp::Wohngruppe::linkMitarbeiter(aWohngruppe,maList.first());
    aWohngruppe->update(aConnection);

}
/**
  * \brief Testet das Laden der mit einer Wohngruppe verknüpften Mitarbeiter
  */
void WohngruppenTest::loadMitarbeiterTest()
{
   QList < QSharedPointer < ebp::Mitarbeiter > > maList = aWohngruppe->loadMitarbeiter(aConnection);
   QVERIFY(maList.count()>0);

}
/**
  * \brief Testet das Laden der mit einer Wohngruppe verknüpften Bewohner. Greift dabei auf Datensätze des testDB.sql dumps zu.
  */
void WohngruppenTest::loadBewohnerTest()
{
    QList < QSharedPointer < ebp::Wohngruppe > > wgList = ebp::Wohngruppe::loadAll(aConnection);
    QList < QSharedPointer< ebp::Bewohner > > bewohnerList = wgList.first()->loadBewohner(aConnection);

    QVERIFY(bewohnerList.count()>0);

}
/**
  * \brief Testet das Laden der mit einer Wohngruppe verknüpften Ereignisse. Greift dabei auf Datensätze des testDB.sql dumps zu.
  */
void WohngruppenTest::loadEreignisseTest()
{
    QList < QSharedPointer < ebp::Wohngruppe > > wgList = ebp::Wohngruppe::loadAll(aConnection);
    QList < QSharedPointer< ebp::Wohngruppenereignis > > ereignisList = wgList.first()->loadEreignisse(aConnection);

    QVERIFY(ereignisList.count()>0);
}
/**
  * \brief Testet das Setzen und Lesen der Datenbankfelder
  */
void WohngruppenTest::testFields()
{
    //Setzen des Namens bereits im Konstruktor
    QString name = aWohngruppe->name();
    QVERIFY(!name.isEmpty());
}

/**
  * \brief Löschen der TestWohngruppe
  */
void WohngruppenTest::cleanupTestCase()
{
    aWohngruppe->remove(aConnection);
}
